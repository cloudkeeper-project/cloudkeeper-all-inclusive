# Lifecode workflow server configuration file.

akka {
    # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
    # to STDOUT)
    loggers = [ "akka.event.slf4j.Slf4jLogger" ]

    # Log level used by the configured loggers (see "loggers") as soon as they
    # have been started; before that, see "stdout-loglevel"
    # Options: OFF, ERROR, WARNING, INFO, DEBUG
    loglevel = "DEBUG"
}

com.svbio.workflow {
    # Settings pertaining to Eclipse Aether (for accessing Maven repositories).
    # These settings are also used by simple-module-executor.
    maven {
        # Path to local Maven repository (uses Maven >= 3.1 format).
        local = ${user.home}${file.separator}.m2${file.separator}repository

        # Offline mode. If in offline mode, remote repositories (both those
        # configured here and those configured in artifacts' POM files will not
        # be accessed).
        offline = false

        # Remote repositories presented as a set of key-value pairs, where key
        # is unique repository identifier and value a url to that remote
        # repository.
        # (We first reset the setting in order to then completely override it.)
        remote = null
        remote {
            maven-central = "http://repo1.maven.org/maven2/"
        }
    }

    # Settings pertaining to database logging.
    database {
        # Java Persistence API 2.1 properties. All properties in this group
        # will be passed to method Persistence#createEntityManagerFactory
        # as-is (without the "com.svbio.workflow.database" prefix).
        javax.persistence {
            jdbc.driver = org.h2.Driver
            jdbc.url = "jdbc:h2:mem:workflowservice"
            jdbc.user = ""
            jdbc.password = ""
            schema-generation.database.action = create
        }
    }

    # Settings pertaining to DRMAA (the distributed-resource-manager
    # interface). These settings are only relevant if setting
    # com.svbio.workflow.executor = "drmaa".
    drmaa {
        # DRMAA scaling factor for memory requirements. See setting
        # "nativespec". This factor should be larger than the scaling factor
        # for the JVM command line, because a JVM needs more memory than just
        # the heap size. Note that 1126 = 110% * 1024.
        memscale = 1126

        # Native specification that will be passed to DRMAA. This setting
        # expects a format string that will be passed to
        # String#format(String, Object...) together with two arguments: the
        # value of Requirements#cpuCores() and the product of
        # Requirements#memoryGB() and setting "memscale". The formatted
        # string will be passed to JobTemplate#setNativeSpecification(String).
        nativespec = "-l slots_free=%d,virtual_free=%dM"

        # Directory in which per-job temporary directories will be created (in
        # order to store files for stdin, stderr, and stdout).
        tmpdir = "/tmp"
    }

    # The simple-module executor. Determines how simple modules are executed.
    # Possible options are: "forking", "drmaa", and "local".
    executor = forking

    # Settings pertaining to forked simple-module executors. These settings are
    # only relevant if setting com.svbio.workflow.executor = "forking" or
    # "drama".
    forkingexecutor {
        # Command line used for starting the processes that execute CloudKeeper
        # simple modules. Note that this setting is a list of strings (one for
        # the command, and one for each argument). Each string in the list is
        # expected to be a either
        # a) a format string that will be passed to
        #    String#format(String, Object...) together with two arguments: the
        #    value of Requirements#cpuCores() and the product of
        #    Requirements#memoryGB() and setting "memscale", or
        # b) a placeholder (without the quotes) that will be expanded into a
        #    (sub-)list:
        #    "<classpath>": will be replaced by a collection of code sources
        #        taken from the current class loader and sufficient to run
        #        com.svbio.workflow.executor.ForkedExecutor
        #    "<props>": will be replaced by configuration-relevant system
        #         properties, that is, by a list of entries of form
        #         "-Dkey=value" where key is either "config.file" or starts
        #         with "com.svbio.workflow" and "value" is the value of the
        #         respective system property in the current JVM.
        commandline = [
            ${java.home}/bin/java,
            "-classpath",
            ${java.class.path},
            "<props>",
            "-Xmx%2$dm",
            com.svbio.workflow.forkedexecutor.ForkedExecutor
        ]

        # Array of classes the code sources of which will be added to the
        # classpath substituted for the "<classpath>" placeholder. These code
        # source need to provide equivalent implementations of the artifacts
        # marked as optional in resource
        # com/svbio/workflow/service/executor-classes.properties
        # (currently only slf4j-simple).
        # This setting is only relevant if setting "commandline" contains
        # element "<classpath>".
        extraclasses = [ org.slf4j.impl.SimpleLoggerFactory ]

        # JVM scaling factor for memory requirements. See setting
        # "commandline". Note that 1024 is chosen because setting "commandline"
        # specifies the Java heap size in Mebibytes (MiB).
        memscale = 1024
    }

    # Settings pertaining to the file-based staging area (storage of inputs,
    # outputs, and intermediate results).
    filestaging {
        # Base path of the file-based staging area. The 'prefix' settings of
        # incoming CloudKeeper workflow execution requests is taken relative to
        # this path.
        basepath = "/tmp"

        # List of (absolute) paths for which hard links (instead of copy
        # operations) are used for certain staging-area operations.
        hardlink = [ ]
    }

    # Settings pertaining to storing the status of executions in the file
    # system. These settings are only relevant if setting
    # com.svbio.workflow.status = "file".
    filestatus {
        # Path that contains execution-status files of form
        # "<execution id>.xml" (for failed and successfully finished workflow
        # executions).
        path = "/tmp/status"
    }

    # Settings pertaining to the HTTP server.
    http {
        # Port where server will be listening for HTTP connections.
        port = 8080
    }

    # Settings pertaining to executing simple module in the current JVM.
    localexecutor {
        # Directory within that the workspaces for module executions will be
        # created.
        workspacebasepath = "/tmp"
    }

    # Default requirements of modules that do not have a Requirements
    # annotation.
    requirements {
        # The number of CPU cores that should be reserved. This property is
        # equivalent to property "cpuCores" of annotation Requirements.
        cpu = 1

        # The amount of main memory (in GB) that should be reserved. This
        # property is equivalent to property "memoryGB" of annotation
        # Requirements.
        memory = 1
    }

    # The staging component. Possible options are: "file" and "s3".
    staging = file

    # The component for persisting the status of workflow executions.
    # Available options are "file" and "none".
    status = file
}
