<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.svbio.workflow</groupId>
    <artifactId>workflow</artifactId>
    <version>1.0.0.0-SNAPSHOT</version>

    <name>Workflow Parent POM</name>
    <packaging>pom</packaging>
    <url>http://www.lifecodehealth.com</url>
    <description>
        This project and its submodules implement a workflow-service component that wraps CloudKeeper in order to
        provide a higher-level library. For instance, configuration happens using the Typesafe Config library, and all
        low-level CloudKeeper components are automatically wired together according to this configuration.
    </description>

    <scm>
        <connection>scm:git:file:${project.basedir}</connection>
        <tag>HEAD</tag>
        <url>https://github.com/lifecodehealth/workflow</url>
    </scm>

    <modules>
        <module>workflow-api</module>
        <module>workflow-bundles</module>
        <module>workflow-forked-executor</module>
        <module>workflow-runtimecontext</module>
        <module>workflow-samples</module>
        <module>workflow-server</module>
        <module>workflow-service</module>
        <module>workflow-servlet</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- BEGIN CloudKeeper, Scala, and Typesafe Config. -->
        <cloudkeeper.version>2.0.0.0-SNAPSHOT</cloudkeeper.version>
        <akka.version>2.4.0</akka.version>
        <scala.version>2.11.7</scala.version>
        <typesafe.config.version>1.3.0</typesafe.config.version>
        <!-- END -->

        <!-- BEGIN Aether -->
        <!-- Note that aether-transport-http relies on the Apache HTTP client, so imported versions should be
             compatible. -->
        <aether.version>1.0.2.v20150114</aether.version>
        <maven.version>3.2.5</maven.version>
        <!-- The following version is taken from: https://github.com/apache/maven/blob/maven-3.2.5/pom.xml#L52 -->
        <plexus.utils.version>3.0.20</plexus.utils.version>
        <!-- The following version is taken from: https://github.com/apache/maven/blob/maven-3.2.5/pom.xml#L54 -->
        <guava.version>18.0</guava.version>
        <!-- END Aether -->

        <dagger.version>2.0.1</dagger.version>
        <eclipse.jpa.version>2.1.1</eclipse.jpa.version>
        <eclipse.persistence.version>2.6.2</eclipse.persistence.version>
        <h2.version>1.4.181</h2.version>
        <hibernate.version>5.0.5.Final</hibernate.version>
        <jackson.version>2.7.1</jackson.version>
        <javax.inject.version>1</javax.inject.version>
        <javax.servlet.version>3.1.0</javax.servlet.version>
        <javax.ws.rs.version>2.0.1</javax.ws.rs.version>
        <jersey.version>2.21</jersey.version>
        <jetty.version>9.3.7.v20160115</jetty.version>
        <jsr305.version>3.0.0</jsr305.version>
        <mockito.version>1.10.19</mockito.version>
        <postgresql.version>9.4-1201-jdbc41</postgresql.version>
        <slf4j.version>1.7.13</slf4j.version>
        <testng.version>6.8.21</testng.version>

        <!-- BEGIN plugins -->
        <codehaus.findbugs.version>3.0.0</codehaus.findbugs.version>
        <jacoco.version>0.7.5.201505241946</jacoco.version>
        <maven.assembly.version>2.5.5</maven.assembly.version>
        <maven.checkstyle.version>2.11</maven.checkstyle.version>
        <maven.compiler.version>3.3</maven.compiler.version>
        <maven.dependency.version>2.10</maven.dependency.version>
        <maven.deploy.version>2.8.2</maven.deploy.version>
        <maven.failsafe.version>${maven.surefire.version}</maven.failsafe.version>
        <maven.javadoc.version>2.10.3</maven.javadoc.version>
        <maven.jar.version>2.4</maven.jar.version>
        <maven.pmd.version>3.0.1</maven.pmd.version>
        <maven.processor.version>2.2.4</maven.processor.version>
        <maven.project-info-reports.version>2.7</maven.project-info-reports.version>
        <maven.resource.version>2.7</maven.resource.version>
        <maven.site.version>3.3</maven.site.version>
        <maven.source.version>2.2.1</maven.source.version>
        <maven.surefire.version>2.17</maven.surefire.version>
        <!-- END plugins -->
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Workflow Components -->
            <dependency>
                <groupId>com.svbio.workflow</groupId>
                <artifactId>workflow-api</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.workflow</groupId>
                <artifactId>workflow-forked-executor</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.workflow</groupId>
                <artifactId>workflow-runtimecontext</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.workflow</groupId>
                <artifactId>workflow-service</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.workflow</groupId>
                <artifactId>workflow-servlet</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>com.svbio.workflow.bundles</groupId>
                <artifactId>workflow-bundle-core</artifactId>
                <version>${project.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.workflow.bundles</groupId>
                <artifactId>workflow-bundle-core</artifactId>
                <version>${project.version}</version>
                <type>ckbundle</type>
            </dependency>

            <!-- CloudKeeper Core Components -->
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-api</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-basic</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-dsl</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-interpreter</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-linker</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-marshaling</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-model</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.core</groupId>
                <artifactId>cloudkeeper-testkit</artifactId>
                <type>test-jar</type>
                <version>${cloudkeeper.version}</version>
            </dependency>

            <dependency>
                <groupId>com.svbio.cloudkeeper.executors</groupId>
                <artifactId>cloudkeeper-drmaa_1.0</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.executors</groupId>
                <artifactId>cloudkeeper-drmaa-executor</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.executors</groupId>
                <artifactId>cloudkeeper-forking-executor</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>

            <dependency>
                <groupId>com.svbio.cloudkeeper</groupId>
                <artifactId>cloudkeeper-file-staging</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>

            <dependency>
                <groupId>com.svbio.cloudkeeper</groupId>
                <artifactId>cloudkeeper-s3-staging</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>

            <dependency>
                <groupId>com.svbio.cloudkeeper.maven</groupId>
                <artifactId>cloudkeeper-maven-bundle-loader</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.maven</groupId>
                <artifactId>cloudkeeper-maven-bundles</artifactId>
                <version>${cloudkeeper.version}</version>
            </dependency>
            <dependency>
                <groupId>com.svbio.cloudkeeper.maven</groupId>
                <artifactId>cloudkeeper-maven-testkit</artifactId>
                <type>test-jar</type>
                <version>${cloudkeeper.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.dagger</groupId>
                <artifactId>dagger</artifactId>
                <version>${dagger.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.inject</groupId>
                <artifactId>javax.inject</artifactId>
                <version>${javax.inject.version}</version>
            </dependency>

            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-actor_2.11</artifactId>
                <version>${akka.version}</version>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-testkit_2.11</artifactId>
                <version>${akka.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.typesafe.akka</groupId>
                <artifactId>akka-slf4j_2.11</artifactId>
                <version>${akka.version}</version>
            </dependency>

            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.code.findbugs</groupId>
                <artifactId>jsr305</artifactId>
                <version>${jsr305.version}</version>
                <!-- Needed only for annotations -->
                <optional>true</optional>
            </dependency>

            <!-- BEGIN Eclipse Persistence: Note that all except the first are only transitive dependencies. However,
                 they need to be version managed (org.eclipse.persistence:eclipselink and
                 org.glassfish.jersey.media:jersey-media-moxy must depend on the same eclipse persistence versions). -->
            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>eclipselink</artifactId>
                <version>${eclipse.persistence.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>org.eclipse.persistence.moxy</artifactId>
                <version>${eclipse.persistence.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>org.eclipse.persistence.antlr</artifactId>
                <version>${eclipse.persistence.version}</version>
            </dependency>

            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>javax.persistence</artifactId>
                <version>${eclipse.jpa.version}</version>
            </dependency>
            <!-- END Eclipse Persistence -->

            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${h2.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>${javax.servlet.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.ws.rs</groupId>
                <artifactId>javax.ws.rs-api</artifactId>
                <version>${javax.ws.rs.version}</version>
            </dependency>

            <dependency>
                <groupId>org.glassfish.jersey.core</groupId>
                <artifactId>jersey-server</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.containers</groupId>
                <artifactId>jersey-container-servlet</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.containers</groupId>
                <artifactId>jersey-container-servlet-core</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.media</groupId>
                <artifactId>jersey-media-moxy</artifactId>
                <version>${jersey.version}</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jersey.core</groupId>
                <artifactId>jersey-client</artifactId>
                <version>${jersey.version}</version>
            </dependency>

            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>${testng.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-core</artifactId>
                <version>${mockito.version}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-server</artifactId>
                <version>${jetty.version}</version>
            </dependency>

            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-servlet</artifactId>
                <version>${jetty.version}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <!-- slf4j simple for tests -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <!-- BEGIN Eclipse Aether -->
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-model</artifactId>
                <version>${maven.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-aether-provider</artifactId>
                <!-- Note that this version must only be used when embedding Aether. For plugins, version
                     ${maven.version} must be used! -->
                <version>${maven.version}</version>
            </dependency>
            <dependency>
                <!-- The following is necessary when using maven-aether-provider, because its POM is quite messy. It
                     depends optionally on org.sonatype.sisu:sisu:guice:no_aop:3.2.3 (see
                     https://github.com/apache/maven/blob/maven-3.2.5/maven-aether-provider/pom.xml#L83), which brings
                     in guava (see https://github.com/sonatype/sisu-guice/blob/sisu-guice-3.2.3/pom.xml#L130).
                     Unfortunately, the transitive guava dependency is not really optional:
                     org.apache.maven.repository.internal.DefaultModelResolver imports com.google.common.base.Predicate.
                     Also note that guava is version controlled in the Maven base POM:
                     https://github.com/apache/maven/blob/maven-3.2.5/pom.xml#L53. -->
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <!-- END Eclipse Aether -->

            <!-- Aether for dynamically resolving Maven/Aether dependencies at runtime -->
            <dependency>
                <groupId>org.eclipse.aether</groupId>
                <artifactId>aether-api</artifactId>
                <version>${aether.version}</version>
            </dependency>
            <!-- Service provider interface -->
            <dependency>
                <groupId>org.eclipse.aether</groupId>
                <artifactId>aether-spi</artifactId>
                <version>${aether.version}</version>
            </dependency>
            <!-- An implementation of the repository system -->
            <dependency>
                <groupId>org.eclipse.aether</groupId>
                <artifactId>aether-impl</artifactId>
                <version>${aether.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.aether</groupId>
                <artifactId>aether-connector-basic</artifactId>
                <version>${aether.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.aether</groupId>
                <artifactId>aether-transport-file</artifactId>
                <version>${aether.version}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.aether</groupId>
                <artifactId>aether-transport-http</artifactId>
                <version>${aether.version}</version>
            </dependency>

            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgresql.version}</version>
            </dependency>

            <!-- Use Typesafe Config for dealing with configuration files. -->
            <dependency>
                <groupId>com.typesafe</groupId>
                <artifactId>config</artifactId>
                <version>${typesafe.config.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>analyze-only</goal>
                        </goals>
                        <configuration>
                            <failOnWarning>true</failOnWarning>
                            <outputXML>true</outputXML>
                            <ignoredUnusedDeclaredDependencies>
                                <ignoredUnusedDeclaredDependency>
                                    ::ckbundle:
                                </ignoredUnusedDeclaredDependency>
                            </ignoredUnusedDeclaredDependencies>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <!-- Prepares property "argLine" pointing to the JaCoCo runtime agent that can be
                                 passed as a VM argument to the application under test. This property needs to
                                 be used by the surefire and failsafe plugins. -->
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.svbio.cloudkeeper.maven</groupId>
                    <artifactId>cloudkeeper-maven-plugin</artifactId>
                    <version>${cloudkeeper.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>compile</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${maven.assembly.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resource.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven.dependency.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-pmd-plugin</artifactId>
                    <version>${maven.pmd.version}</version>
                    <!-- Executions of the plugin are defined in the "analyze" profile. -->
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>${maven.checkstyle.version}</version>
                    <!-- Executions of the plugin are defined in the "analyze" profile. -->
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>findbugs-maven-plugin</artifactId>
                    <version>${codehaus.findbugs.version}</version>
                    <!-- Executions of the plugin are defined in the "analyze" profile. -->
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven.failsafe.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven.jar.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven.deploy.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven.javadoc.version}</version>
                    <configuration>
                        <additionalDependencies>
                            <additionalDependency>
                                <groupId>com.google.code.findbugs</groupId>
                                <artifactId>jsr305</artifactId>
                                <version>${jsr305.version}</version>
                            </additionalDependency>
                        </additionalDependencies>
                        <additionalparam>-Xdoclint:none</additionalparam>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-plugin-plugin</artifactId>
                    <version>${maven.plugin.plugin.version}</version>
                    <executions>
                        <execution>
                            <!-- In recent versions of the Maven plugin plugin, goal 'descriptor' binds to phase
                                 'process-classes' by default. However, until Maven 3.2.1, the default lifecycle for
                                 'maven-plugin' still bound 'descriptor' to phase 'generate-resources'. At that stage,
                                 the classes have not yet been compiled, so @Mojo annotations would not be found.
                                 See: http://maven.apache.org/ref/3.2.1/maven-core/default-bindings.html#Plugin_bindings_for_maven-plugin_packaging
                                 Starting with Maven 3.2.2, this <execution> node is no longer needed.
                                 -->
                            <id>default-descriptor</id>
                            <phase>process-classes</phase>
                            <goals>
                                <goal>descriptor</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven.source.version}</version>
                </plugin>

                <!-- The maven-processor-plugin is used to run annotation processors. -->
                <plugin>
                    <groupId>org.bsc.maven</groupId>
                    <artifactId>maven-processor-plugin</artifactId>
                    <version>${maven.processor.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <distributionManagement>
        <site>
            <id>github</id>
            <name>GitHub Project Page</name>
            <url>scm:git:https://github.com/lifecodehealth/workflow.git</url>
        </site>
    </distributionManagement>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven.project-info-reports.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven.javadoc.version}</version>
                <reportSets>
                    <reportSet>
                        <id>non-aggregate</id>
                        <reports>
                            <report>javadoc</report>
                        </reports>
                    </reportSet>
                    <reportSet>
                        <id>aggregate</id>
                        <reports>
                            <report>aggregate</report>
                        </reports>
                    </reportSet>
                </reportSets>
                <configuration>
                    <additionalparam>-Xdoclint:none</additionalparam>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>analyze</id>
            <reporting>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>findbugs-maven-plugin</artifactId>
                        <configuration>
                            <effort>Max</effort>
                            <xmlOutput>true</xmlOutput>
                        </configuration>
                    </plugin>
                </plugins>
            </reporting>
        </profile>
        <profile>
            <id>release</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <version>${maven.javadoc.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>jar</goal>
                                    <goal>test-jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>${maven.source.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                    <goal>test-jar-no-fork</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
